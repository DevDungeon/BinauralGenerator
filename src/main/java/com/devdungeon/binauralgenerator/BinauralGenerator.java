package com.devdungeon.binauralgenerator;

import javax.sound.sampled.AudioFormat;

/**
 *
 * @author NanoDano <nanodano@devdungeon.com>
 */
public class BinauralGenerator extends javax.swing.JFrame
{
    private static final int SAMPLE_RATE = 16 * 1024; // ~16KHz
    private static final int SAMPLE_SIZE = 8; // 8-bit per sample
    private static final int NUM_CHANNELS = 2; // Stereo
    private final AudioFormat audioFormat;
    private static int leftFreq;
    private static int rightFreq;
    private AudioOut bgPlayer; // a thread subclass
    private final AudioBuffer leftChannel;
    private final AudioBuffer rightChannel;
    private boolean isPlaying = false;

    /**
     * Creates new form MainWindow
     */
    public BinauralGenerator()
    {
        initComponents();
        audioFormat = new AudioFormat(SAMPLE_RATE, SAMPLE_SIZE, NUM_CHANNELS, true, true);
        leftFreq = leftFreqSlider.getValue();
        rightFreq = rightFreqSlider.getValue();
        leftChannel = new AudioBuffer(SAMPLE_RATE, leftFreq);
        rightChannel = new AudioBuffer(SAMPLE_RATE, rightFreq);
    }

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BinauralGenerator().setVisible(true);
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        leftFreqSlider = new javax.swing.JSlider();
        rightFreqSlider = new javax.swing.JSlider();
        leftChanLabel = new javax.swing.JLabel();
        rightChanLabel = new javax.swing.JLabel();
        playButton = new javax.swing.JToggleButton();
        leftFreqLabel = new javax.swing.JLabel();
        rightFreqLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        leftFreqSlider.setMajorTickSpacing(5);
        leftFreqSlider.setMaximum(480);
        leftFreqSlider.setMinimum(400);
        leftFreqSlider.setMinorTickSpacing(1);
        leftFreqSlider.setPaintTicks(true);
        leftFreqSlider.setValue(430);
        leftFreqSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateLeftFreq(evt);
            }
        });

        rightFreqSlider.setMajorTickSpacing(5);
        rightFreqSlider.setMaximum(480);
        rightFreqSlider.setMinimum(400);
        rightFreqSlider.setMinorTickSpacing(1);
        rightFreqSlider.setPaintTicks(true);
        rightFreqSlider.setValue(450);
        rightFreqSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateRightFreq(evt);
            }
        });

        leftChanLabel.setText("Left channel");

        rightChanLabel.setText("Right channel");

        playButton.setText("Play");
        playButton.setToolTipText("");
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toggleSound(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, leftFreqSlider, org.jdesktop.beansbinding.ELProperty.create("${value} Hz"), leftFreqLabel, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rightFreqSlider, org.jdesktop.beansbinding.ELProperty.create("${value} Hz"), rightFreqLabel, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rightChanLabel)
                            .addComponent(leftChanLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftFreqSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rightFreqSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftFreqLabel)
                            .addComponent(rightFreqLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(playButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leftFreqLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftFreqSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftChanLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rightFreqSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightChanLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightFreqLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(playButton)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateLeftFreq(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updateLeftFreq
        leftFreq = leftFreqSlider.getValue();
        leftChannel.fillBufferWithSineWave(leftFreq);        
    }//GEN-LAST:event_updateLeftFreq

    private void updateRightFreq(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updateRightFreq
        rightFreq = rightFreqSlider.getValue();
        rightChannel.fillBufferWithSineWave(rightFreq);
    }//GEN-LAST:event_updateRightFreq

    private void toggleSound(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toggleSound
        toggleAudio();
    }//GEN-LAST:event_toggleSound

    /**
     * Start and stop the binaural audio.
     */
    private void toggleAudio() {
        if (isPlaying) {
            bgPlayer.shutdown();
            isPlaying = false;
        } else {
            bgPlayer = new AudioOut(audioFormat, leftChannel.getBuffer(), rightChannel.getBuffer());
            bgPlayer.start();
            isPlaying = true;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel leftChanLabel;
    private javax.swing.JLabel leftFreqLabel;
    private javax.swing.JSlider leftFreqSlider;
    private javax.swing.JToggleButton playButton;
    private javax.swing.JLabel rightChanLabel;
    private javax.swing.JLabel rightFreqLabel;
    private javax.swing.JSlider rightFreqSlider;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
